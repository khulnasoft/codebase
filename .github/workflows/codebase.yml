name: codebase
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  codebase-github-check:
    permissions:
      checks: write
      contents: read
      pull-requests: write
    name: codebase (github-check)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Install linters
        run: go install golang.org/x/lint/golint@latest

      - name: Setup codebase
        # uses: codebase/action-setup@v1
        run: |
          go install ./cmd/codebase

      - name: Run codebase
        env:
          CODEBASE_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          golint ./... | codebase -f=golint -name=golint-github-check -reporter=github-check -level=warning

      - name: Run codebase with sub-dir (github-check)
        env:
          CODEBASE_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd ./_testdata/ && golint ./... | codebase -f=golint -name=golint-check-subdir -reporter=github-check -level=info -filter-mode=nofilter

      - name: Custom rdjson test (github-check)
        env:
          CODEBASE_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat ./_testdata/custom_rdjson.json | \
            codebase -name="custom-rdjson" -f=rdjson -reporter=github-check -level=info

  codebase-pr:
    permissions:
      checks: write
      contents: read
      pull-requests: write
    if: github.event_name == 'pull_request'
    name: codebase on Pull Request
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Install linters
        run: go install golang.org/x/lint/golint@latest

      - name: Setup codebase
        # uses: codebase/action-setup@v1
        run: |
          go install ./cmd/codebase

      - name: Run codebase (github-pr-check)
        continue-on-error: true
        env:
          CODEBASE_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          codebase -reporter=github-pr-check -runners=golint,govet -fail-on-error

      - name: Run codebase (github-pr-reviewe with tee)
        env:
          CODEBASE_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Remove Go Problem Matchers [1] as it reports duplicate results with
          # codebase.
          # [1]: https://github.com/actions/toolkit/blob/master/docs/commands.md#problem-matchers
          echo "::remove-matcher owner=go::"
          golint ./... | codebase -f=golint -name=golint-pr-review -reporter=github-pr-reviewe -tee

      - name: Run codebase with sub-dir (github-pr-reviewe)
        env:
          CODEBASE_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd ./_testdata/ && golint ./... | codebase -f=golint -name=golint-pr-review-subdir -reporter=github-pr-reviewe -tee

      - name: Run codebase with sub-dir (local+fail-on-error)
        run: |
          echo 'var LocalTest = 14' >> ./_testdata/golint.go
          cd ./_testdata/ && golint ./... | codebase -f=golint -diff="git diff" -fail-on-error || EXIT_CODE=$?
          git reset --hard @
          test "${EXIT_CODE}" = 1

      - name: Run codebase (github-pr-check with fail-on-error)
        continue-on-error: true
        env:
          CODEBASE_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd ./_testdata/ && golint ./... | codebase -f=golint -name=golint-pr-check-fail-on-error -reporter=github-pr-check -fail-on-error

      - name: Run codebase (github-pr-check with -filter-mode=file)
        env:
          CODEBASE_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          golint | codebase -f=golint -name=golint-pr-check-filter-mode-file -reporter=github-pr-check -filter-mode=file -level=warning

      - name: Run codebase (github-pr-reviewe -filter-mode=nofilter)
        env:
          CODEBASE_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd ./_testdata/ && golint ./... | codebase -f=golint -name=golint-pr-review-nofilter -reporter=github-pr-reviewe -filter-mode=nofilter -fail-on-error || EXIT_CODE=$?
          test "${EXIT_CODE}" = 1

      - name: Unexpected failure (github-pr-reviewe)
        env:
          CODEBASE_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd ./_testdata/ && codebase -conf=codebase_error.yml \
            -reporter=github-pr-reviewe || EXIT_CODE=$?
          test "${EXIT_CODE}" = 1
      - name: Unexpected failure (github-check)
        env:
          CODEBASE_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd ./_testdata/ && codebase -conf=codebase_error.yml \
            -reporter=github-check || EXIT_CODE=$?
          test "${EXIT_CODE}" = 1
      - name: Unexpected failure (local)
        run: |
          cd ./_testdata/ && codebase -conf=codebase_error.yml \
            -reporter=local -diff='git diff master' || EXIT_CODE=$?
          test "${EXIT_CODE}" = 1
      - name: Suggestion (rdjsonl)
        env:
          CODEBASE_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat ./_testdata/suggestions.json | \
            codebase -name="suggestion-test" -f=rdjsonl -reporter=github-pr-reviewe

      - name: Custom rdjsonl test (github-pr-reviewe)
        env:
          CODEBASE_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat ./_testdata/custom_rdjson.json | \
            codebase -name="custom-rdjson" -f=rdjson -reporter=github-pr-reviewe

      - name: gofmt -s with codebase
        env:
          CODEBASE_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gofmt -s -d . | \
            codebase -name="gofmt" -f=diff -f.diff.strip=0 -reporter=github-pr-reviewe

  golangci-lint:
    permissions:
      checks: write
      contents: read
      pull-requests: write
    if: github.event_name == 'pull_request'
    name: runner / golangci-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: codebase/action-golangci-lint@v2
        with:
          github_token: ${{ secrets.github_token }}
          golangci_lint_flags: "--enable-all --exclude-use-default=false -D wsl -D testpackage"
          level: "warning"
          reporter: github-pr-check

  staticcheck:
    permissions:
      checks: write
      contents: read
      pull-requests: write
    if: github.event_name == 'pull_request'
    name: runner / staticcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
      - uses: codebase/action-staticcheck@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-reviewe
          filter_mode: nofilter
          fail_on_error: true
          # workdir: ./_testdata/

  misspell:
    name: runner / misspell
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: codebase/action-misspell@v1
        with:
          github_token: ${{ secrets.github_token }}
          locale: "US"
          reporter: github-check

  languagetool:
    name: runner / languagetool
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: codebase/action-languagetool@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-check
          level: info
          patterns: |
            **/*.md
            !**/testdata/**

  shellcheck:
    if: github.event_name == 'pull_request'
    name: runner / shellcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: codebase/action-shellcheck@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-reviewe

  alex:
    name: runner / alex
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: codebase/action-alex@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-check
          level: info

  textlint:
    name: runner / textlint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: codebase/action-setup@v1
      - run: npm install
      - name: textlint
        env:
          CODEBASE_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx textlint -f checkstyle README.md | \
            codebase -f=checkstyle -name="textlint" -reporter=github-check -level=info

  sarif:
    name: runner / textlint sarif
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: codebase/action-setup@v1
      - run: npm install
      - name: textlint sarif
        env:
          CODEBASE_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx textlint -f @microsoft/eslint-formatter-sarif README.md | \
            codebase -f=sarif -name="textlint" -reporter=github-check -level=info
